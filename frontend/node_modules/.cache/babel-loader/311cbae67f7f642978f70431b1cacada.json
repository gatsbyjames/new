{"ast":null,"code":"import { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_RESET } from \"../constants/userConstants\";\nimport axios from \"axios\";\nimport { Action } from \"history\";\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/users/login/\", {\n      username: email,\n      password: password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data)); // set the data in state and local storage\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.meesage\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem(\"userInfo\");\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/users/register/\", {\n      name: name,\n      email: email,\n      password: password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`api/users/${id}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.meesage\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      \"Content-type\": \"application/json\",\n      Authorization: `Bearer ${userInfo.token}`\n    };\n    const {\n      data\n    } = await axios.put(\"/api/users/profile/update/\", user, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    }); // 프로필이 업데이트 됬기때문에 로그인을 해줘야함\n\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};","map":{"version":3,"names":["USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_RESET","axios","Action","login","email","password","dispatch","type","config","headers","data","post","username","payload","localStorage","setItem","JSON","stringify","error","response","detail","meesage","logout","removeItem","register","name","message","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user","put"],"sources":["/Users/gatsby/Downloads/projects/ecommerce/frontend/src/actions/userActions.js"],"sourcesContent":["import {\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGIN_FAIL,\n  USER_LOGOUT,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS,\n  USER_REGISTER_FAIL,\n  USER_DETAILS_REQUEST,\n  USER_DETAILS_SUCCESS,\n  USER_DETAILS_FAIL,\n  USER_UPDATE_PROFILE_REQUEST,\n  USER_UPDATE_PROFILE_SUCCESS,\n  USER_UPDATE_PROFILE_FAIL,\n  USER_UPDATE_PROFILE_RESET,\n} from \"../constants/userConstants\";\nimport axios from \"axios\";\nimport { Action } from \"history\";\n\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST,\n    });\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n    };\n\n    const { data } = await axios.post(\n      \"/api/users/login/\",\n      { username: email, password: password },\n      config\n    );\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    });\n\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n\n    // set the data in state and local storage\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.meesage,\n    });\n  }\n};\n\nexport const logout = () => (dispatch) => {\n  localStorage.removeItem(\"userInfo\");\n  dispatch({ type: USER_LOGOUT });\n};\n\nexport const register = (name, email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST,\n    });\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n    };\n\n    const { data } = await axios.post(\n      \"/api/users/register/\",\n      { name: name, email: email, password: password },\n      config\n    );\n\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data,\n    });\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    });\n\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.get(`api/users/${id}`, config);\n\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.meesage,\n    });\n  }\n};\n\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      \"Content-type\": \"application/json\",\n      Authorization: `Bearer ${userInfo.token}`,\n    };\n\n    const { data } = await axios.put(\n      \"/api/users/profile/update/\",\n      user,\n      config\n    );\n\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data,\n    });\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    });\n    // 프로필이 업데이트 됬기때문에 로그인을 해줘야함\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}