[{"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/index.js":"1","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/reportWebVitals.js":"2","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/App.js":"3","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/store.js":"4","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/CartScreen.js":"5","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/components/Footer.js":"6","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/LoginScreen.js":"7","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/HomeScreen.js":"8","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/RegisterScreen.js":"9","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/PaymentScreen.js":"10","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/components/Header.js":"11","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/ProfileScreen.js":"12","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/ShippingScreen.js":"13","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/PlaceOrderScreen.js":"14","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/OrderScreen.js":"15","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/ProductScreen.js":"16","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/OrderListScreen.js":"17","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/ProductListScreen.js":"18","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/ProductEditScreen.js":"19","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/UserEditScreen.js":"20","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/UserListScreen.js":"21","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/reducers/cartReducers.js":"22","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/reducers/productReducers.js":"23","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/reducers/orderReducers.js":"24","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/reducers/userReducers.js":"25","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/components/Message.js":"26","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/components/FormContainer.js":"27","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/components/Loader.js":"28","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/components/Product.js":"29","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/components/CheckoutSteps.js":"30","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/components/Rating.js":"31","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/actions/cartActions.js":"32","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/actions/userActions.js":"33","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/constants/userConstants.js":"34","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/constants/orderConstants.js":"35","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/actions/orderActions.js":"36","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/constants/productConstants.js":"37","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/actions/productActions.js":"38","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/constants/cartConstants.js":"39","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/components/SearchBox.js":"40","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/components/Paginate.js":"41"},{"size":633,"mtime":1653867776728,"results":"42","hashOfConfig":"43"},{"size":362,"mtime":1653778558237,"results":"44","hashOfConfig":"43"},{"size":2538,"mtime":1655110141604,"results":"45","hashOfConfig":"43"},{"size":2312,"mtime":1655145778610,"results":"46","hashOfConfig":"43"},{"size":3971,"mtime":1655148470062,"results":"47","hashOfConfig":"43"},{"size":316,"mtime":1653779478005,"results":"48","hashOfConfig":"43"},{"size":2562,"mtime":1654309302658,"results":"49","hashOfConfig":"43"},{"size":1750,"mtime":1655151576472,"results":"50","hashOfConfig":"43"},{"size":3365,"mtime":1654222881326,"results":"51","hashOfConfig":"43"},{"size":1509,"mtime":1654256296431,"results":"52","hashOfConfig":"43"},{"size":2964,"mtime":1655151019011,"results":"53","hashOfConfig":"43"},{"size":5328,"mtime":1654525470252,"results":"54","hashOfConfig":"43"},{"size":2672,"mtime":1654255644037,"results":"55","hashOfConfig":"43"},{"size":5001,"mtime":1655119263683,"results":"56","hashOfConfig":"43"},{"size":6100,"mtime":1655148485718,"results":"57","hashOfConfig":"43"},{"size":8237,"mtime":1655110141624,"results":"58","hashOfConfig":"43"},{"size":2615,"mtime":1655144218620,"results":"59","hashOfConfig":"43"},{"size":4015,"mtime":1655147759573,"results":"60","hashOfConfig":"43"},{"size":5898,"mtime":1655115178385,"results":"61","hashOfConfig":"43"},{"size":2994,"mtime":1655148166237,"results":"62","hashOfConfig":"43"},{"size":2631,"mtime":1655110141626,"results":"63","hashOfConfig":"43"},{"size":1301,"mtime":1654421612297,"results":"64","hashOfConfig":"43"},{"size":3587,"mtime":1655110141617,"results":"65","hashOfConfig":"43"},{"size":3125,"mtime":1655145250896,"results":"66","hashOfConfig":"43"},{"size":3564,"mtime":1655145168842,"results":"67","hashOfConfig":"43"},{"size":209,"mtime":1653935628364,"results":"68","hashOfConfig":"43"},{"size":344,"mtime":1654059854621,"results":"69","hashOfConfig":"43"},{"size":481,"mtime":1653884916285,"results":"70","hashOfConfig":"43"},{"size":920,"mtime":1653792809424,"results":"71","hashOfConfig":"43"},{"size":1238,"mtime":1654255608564,"results":"72","hashOfConfig":"43"},{"size":1704,"mtime":1653792114141,"results":"73","hashOfConfig":"43"},{"size":1387,"mtime":1654419199841,"results":"74","hashOfConfig":"43"},{"size":6676,"mtime":1655148463403,"results":"75","hashOfConfig":"43"},{"size":1503,"mtime":1655110141613,"results":"76","hashOfConfig":"43"},{"size":1260,"mtime":1655110141611,"results":"77","hashOfConfig":"43"},{"size":5046,"mtime":1655148459434,"results":"78","hashOfConfig":"43"},{"size":1520,"mtime":1655110141612,"results":"79","hashOfConfig":"43"},{"size":4620,"mtime":1655114133192,"results":"80","hashOfConfig":"43"},{"size":293,"mtime":1654421279082,"results":"81","hashOfConfig":"43"},{"size":824,"mtime":1655151010869,"results":"82","hashOfConfig":"43"},{"size":755,"mtime":1655151716419,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},"ujlv3o",{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"87"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"87"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"87"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"87"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"87"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"87"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"87"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"87"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"87"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"87"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"87"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"87"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"87"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"87"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"87"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"87"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"87"},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"87"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"87"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"87"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/index.js",[],[],[],"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/reportWebVitals.js",[],[],"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/App.js",[],[],"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/store.js",["228","229","230"],[],"import { combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport {\n  productListReducer,\n  productDetailsReducer,\n  productCreateReducer,\n  productUpdateReducer,\n  productReviewCreateReducer,\n  productTopRatedReducer,\n  productDeleteReducer,\n} from \"./reducers/productReducers\";\nimport {\n  userLoginReducer,\n  userDetailsReducer,\n  userRegisterReducer,\n  userUpdateProfileReducer,\n  userListReducer,\n  userUpdateReducer,\n  userDeleteReducer,\n} from \"./reducers/userReducers\";\nimport { cartReducer } from \"./reducers/cartReducers\";\nimport {\n  orderCreateReducer,\n  orderDetailsReducer,\n  orderListMyReducer,\n  orderListReducer,\n  orderPayReducer,\n  orderDeliverReducer,\n} from \"./reducers/orderReducers\";\n\nconst cartItemFromStorage = localStorage.getItem(\"cartItems\")\n  ? JSON.parse(localStorage.getItem(\"cartItems\"))\n  : [];\n\nconst userInfoFromStorage = localStorage.getItem(\"userInfo\")\n  ? JSON.parse(localStorage.getItem(\"userInfo\"))\n  : null;\n\nconst shippingAddressFromStorage = localStorage.getItem(\"shippingAddress\")\n  ? JSON.parse(localStorage.getItem(\"shippingAddress\"))\n  : {};\n\n// our data come from state\n\nconst preloadedState = {\n  cart: {\n    cartItems: cartItemFromStorage,\n    shippingAddress: shippingAddressFromStorage,\n  },\n  userLogin: { userInfo: userInfoFromStorage },\n};\n\nconst reducer = {\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  productDelete: productDeleteReducer,\n  productCreate: productCreateReducer,\n  productUpdate: productUpdateReducer,\n  productReviewCreate: productReviewCreateReducer,\n  productTopRated: productTopRatedReducer,\n\n  cart: cartReducer,\n\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n\n  userUpdateProfile: userUpdateProfileReducer,\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n  userUpdate: userUpdateReducer,\n\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  orderListMy: orderListMyReducer,\n  orderList: orderListReducer,\n  orderDeliver: orderDeliverReducer,\n};\n\nexport default configureStore({\n  reducer,\n  preloadedState,\n  middleware: [thunk],\n});\n","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/CartScreen.js",["231"],[],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams, useLocation, Link } from \"react-router-dom\";\nimport {\n  Row,\n  Col,\n  ListGroup,\n  Image,\n  Form,\n  Button,\n  Card,\n} from \"react-bootstrap\";\nimport Message from \"../components/Message\";\nimport { addToCart, removeFromCart } from \"../actions/cartActions\";\n\nfunction CartScreen() {\n  const { id } = useParams();\n  // id 는 오로직 한개\n  const { search } = useLocation();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const qty = search ? Number(search.split(\"=\")[1]) : 1;\n\n  // location 은 필수\n\n  const cart = useSelector((state) => state.cart);\n  const { cartItems } = cart;\n\n  useEffect(() => {\n    if (id) {\n      dispatch(addToCart(id, qty));\n    }\n    // console.log(\"cart is added\")\n    //원래는 빈 어레이 인데 useEffect 가 마운트 되고 난 다음에 카트가 추가됨\n  }, [dispatch, id, qty]);\n\n  const removeFromCartHandler = (id) => {\n    dispatch(removeFromCart(id));\n  };\n\n  const checkoutHanlder = () => {\n    navigate(\"/login?redirect=/shipping\");\n    // ㅈㄴ 간단하네 씨빨!!!! shipping 앞에 / 만 붙이니까 login 띠 버리고 바로 shipping 으로 이동함\n  };\n\n  return (\n    <Row>\n      <Col md={8}>\n        <h1>Shopping Cart</h1>\n        {cartItems.length === 0 ? (\n          <Message variant=\"info\">\n            Your cart is empty <Link to=\"/\">go back</Link>\n          </Message>\n        ) : (\n          <ListGroup variant=\"flush\">\n            {cartItems.map((item) => (\n              <ListGroup.Item key={item.product}>\n                <Row>\n                  <Col md={2}>\n                    <Image src={item.image} alt={item.name} fluid rounded />\n                    {/* fluid 글씨 작아짐, rounded 잘 모르겠음 */}\n                  </Col>\n\n                  <Col md={3}>\n                    <Link to={`/product/${item.product}`}>{item.name}</Link>\n                  </Col>\n\n                  <Col md={2}>${item.price}</Col>\n\n                  <Col md={2}>\n                    <Form.Control\n                      as=\"select\"\n                      value={item.qty}\n                      onChange={(e) =>\n                        dispatch(addToCart(item.product, e.value.target))\n                      }\n                    >\n                      {[...Array(item.countInStock).keys()].map((x) => (\n                        <option key={x + 1} value={x + 1}>\n                          {x + 1}\n                        </option>\n                        //배열이 0부터 시작해서 x + 1 임\n                      ))}\n                    </Form.Control>\n                  </Col>\n\n                  <Col>\n                    <Button\n                      type=\"button\"\n                      variant=\"light\"\n                      onClick={() => removeFromCartHandler(item.product)}\n                      //item.product 집어 넣어야 작동하네\n                    >\n                      <i className=\"fas- fa-trash\"></i>\n                    </Button>\n                  </Col>\n                </Row>\n              </ListGroup.Item>\n            ))}\n          </ListGroup>\n        )}\n      </Col>\n\n      <Col md={4}>\n        <Card>\n          <ListGroup variant=\"flush\">\n            <h2>\n              Subtotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)})\n              items\n            </h2>\n            $\n            {cartItems\n              .reduce((acc, item) => acc + item.qty * item.price, 0)\n              .toFixed(2)}\n          </ListGroup>\n\n          <ListGroup.Item>\n            <Button\n              type=\"button\"\n              className=\"btn-block\"\n              disabled={cartItems.length === 0}\n              onClick={checkoutHanlder}\n            >\n              Process To Checkout\n            </Button>\n          </ListGroup.Item>\n        </Card>\n      </Col>\n    </Row>\n  );\n}\n\nexport default CartScreen;\n","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/components/Footer.js",[],[],"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/LoginScreen.js",["232"],[],"import React, { useState, useEffect } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport FormContainer from \"../components/FormContainer\";\nimport { login } from \"../actions/userActions\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\n\nfunction LoginScreen() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  //Warning: A component is changing an uncontrolled input to be controlled. This is likely caused\n  // useState 에 '' 안 넣으니까 이 뜸\n\n  // 500 erro 는 / 를 안넣어서, 401 error 는 django signal 때문에\n\n  const { search } = useLocation();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const redirect = search ? search.split(\"=\")[1] : \"/\";\n  // 로그인 성공 시 홈으로 보내주는 코드\n\n  const userLogin = useSelector((state) => state.userLogin);\n  // useSelector 이새끼가 ㅋㅋ store.js 에서 reducer 가져오는 새끼임\n  const { loading, error, userInfo } = userLogin;\n\n  useEffect(() => {\n    if (userInfo) {\n      navigate(redirect);\n    }\n  }, [userInfo, redirect]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(login(email, password));\n  };\n\n  return (\n    <FormContainer>\n      <h1>Sign In</h1>\n      {error && <Message variant=\"danger\">{error}</Message>}\n      {loading && <Loader />}\n      <Form onSubmit={submitHandler}>\n        <Form.Group controlId=\"email\">\n          <Form.Label>Email Address</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Enter Email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId=\"password\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Enter Password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Button type=\"submit\" variant=\"primary\">\n          Sign In\n        </Button>\n      </Form>\n\n      <Row className=\"py-3\">\n        <Col>\n          New Customer?{\" \"}\n          <Link to={redirect ? `/register?redirect=${redirect}` : \"/register\"}>\n            Register\n          </Link>\n        </Col>\n      </Row>\n    </FormContainer>\n  );\n}\n\nexport default LoginScreen;\n","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/HomeScreen.js",["233"],[],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Row, Col } from \"react-bootstrap\";\nimport Product from \"../components/Product\";\nimport { listProducts } from \"../actions/productActions\";\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport Paginate from \"../components/Paginate\";\nimport { useLocation } from \"react-router-dom\";\n\nfunction HomeScreen() {\n  // const [products, setProducts] = useState([]);\n\n  const dispatch = useDispatch();\n  const productList = useSelector((state) => state.productList);\n  const { error, loading, products, page, pages } = productList;\n  const { search } = useLocation();\n\n  let keyword = search;\n\n  useEffect(() => {\n    dispatch(listProducts());\n\n    // async function fetchProduct() {\n    //   const { data } = await axios.get('/api/products/')\n    //   setProducts(data)\n    // }\n\n    // //////////\n    // // then 대신에 const { data } 이렇게 해버리면 된다\n    // // http:127.0.0.1:8000 지우고 package.json 에 proxy 설정해주면됨\n    // // 서버 껏다 다시 켜줘야됨\n    // //////////\n\n    // fetchProduct()\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h1>Latest Product</h1>\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant=\"danger\">{error}</Message>\n      ) : (\n        <div>\n          <Row>\n            {products.map((product) => (\n              <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\n                <Product product={product} />\n              </Col>\n            ))}\n          </Row>\n          <Paginate page={page} pages={pages} keyword={keyword} />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default HomeScreen;\n","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/RegisterScreen.js",["234","235"],[],"import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Form, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation, useNavigate, Link } from \"react-router-dom\";\nimport { register } from \"../actions/userActions\";\nimport FormContainer from \"../components/FormContainer\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\n\nfunction RegisterScreen() {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n\n  const dispatch = useDispatch();\n  const { search } = useLocation();\n  const navigate = useNavigate();\n\n  const redirect = search ? search.split(\"=\")[1] : \"/\";\n\n  const userRegister = useSelector((state) => state.userRegister);\n  const { loading, error, userInfo } = userRegister;\n\n  useEffect(() => {\n    if (userInfo) {\n      navigate(redirect);\n    }\n  }, [userInfo, redirect]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n\n    if (password != confirmPassword) {\n      setMessage(\"Password does not match\");\n    } else {\n      dispatch(register(name, email, password));\n    }\n  };\n\n  return (\n    <FormContainer>\n      <h1>Sign In</h1>\n      {message && <Message variant=\"danger\">{message}</Message>}\n      {error && <Message variant=\"danger\">{error}</Message>}\n      {loading && <Loader />}\n      <Form onSubmit={submitHandler}>\n        <Form.Group controlId=\"name\">\n          <Form.Label>Name</Form.Label>\n          <Form.Control\n            // conrol 이라고 쓰니까 element type is invalid 라고뜸\n            required\n            type=\"name\"\n            placeholder=\"Enter name\"\n            value={name || \"\"}\n            onChange={(e) => setName(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId=\"email\">\n          <Form.Label>Email Address</Form.Label>\n          <Form.Control\n            required\n            type=\"email\"\n            placeholder=\"Enter Email\"\n            value={email || \"\"}\n            onChange={(e) => setEmail(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId=\"password\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            required\n            type=\"password\"\n            placeholder=\"Enter Password\"\n            value={password || \"\"}\n            onChange={(e) => setPassword(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId=\"passwordConfirm\">\n          <Form.Label>Confirm Password</Form.Label>\n          <Form.Control\n            required\n            type=\"password\"\n            placeholder=\"Confirm Password\"\n            value={confirmPassword || \"\"}\n            onChange={(e) => setConfirmPassword(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Button type=\"submit\" variant=\"primary\">\n          Register\n        </Button>\n      </Form>\n\n      <Row className=\"py-3\">\n        <Col>\n          Have an Account?{\" \"}\n          <Link to={redirect ? `/login?redirect=${redirect}` : \"/login\"}>\n            Log in\n          </Link>\n        </Col>\n      </Row>\n    </FormContainer>\n  );\n}\n\nexport default RegisterScreen;\n","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/PaymentScreen.js",["236"],[],"import React, { useState, useEffect } from \"react\";\nimport { Form, Button, Col } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport CheckoutSteps from \"../components/CheckoutSteps\";\nimport FormContainer from \"../components/FormContainer\";\nimport { savePaymentMethod } from \"../actions/cartActions\";\n\nfunction PaymentScreen() {\n  const cart = useSelector((state) => state.cart);\n  const { shippingAddress } = cart;\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const [paymentMethod, setPaymentMethod] = useState(\"Paypal\");\n\n  if (!shippingAddress) {\n    navigate(\"/shipping\");\n  }\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(savePaymentMethod(paymentMethod));\n    navigate(\"/placeorder\");\n  };\n  return (\n    <FormContainer>\n      <CheckoutSteps step1 step2 step3 />\n\n      <Form onSubmit={submitHandler}>\n        <Form.Group>\n          <Form.Label as=\"legend\">Select Method</Form.Label>\n          <Col>\n            <Form.Check\n              type=\"radio\"\n              label=\"PayPal or Credit Card\"\n              id=\"paypal\"\n              name=\"paymentMethod\"\n              checked\n              onChange={(e) => setPaymentMethod(e.target.value)}\n            ></Form.Check>\n          </Col>\n        </Form.Group>\n\n        <Button type=\"submit\" variant=\"primary\">\n          Continue\n        </Button>\n      </Form>\n    </FormContainer>\n  );\n}\n\nexport default PaymentScreen;\n","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/components/Header.js",["237","238"],[],"import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { Navbar, Nav, Container, NavDropdown } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { logout } from \"../actions/userActions\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport SearchBox from \"./SearchBox\";\n\nfunction Header() {\n  const navigate = useNavigate();\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const dispatch = useDispatch();\n\n  const logoutHandler = () => {\n    dispatch(logout());\n    navigate(\"/\");\n  };\n\n  return (\n    <header>\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\n        <Container>\n          <LinkContainer to=\"/\">\n            <Navbar.Brand>ProShop</Navbar.Brand>\n          </LinkContainer>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            {/* <Route render={({ history }) => <SearchBox history={history} />} /> */}\n            <Nav className=\"me-auto\">\n              {userInfo ? (\n                <LinkContainer to=\"/cart\">\n                  <Nav.Link>\n                    <i className=\"fas fa-shopping-cart\"></i>Cart\n                  </Nav.Link>\n                </LinkContainer>\n              ) : (\n                <LinkContainer to=\"/login\">\n                  <Nav.Link>\n                    <i className=\"fas fa-shopping-cart\"></i>Cart\n                  </Nav.Link>\n                </LinkContainer>\n              )}\n\n              {userInfo ? (\n                <NavDropdown title={userInfo.name} id=\"username\">\n                  <LinkContainer to=\"/profile\">\n                    <NavDropdown.Item>Profile</NavDropdown.Item>\n                  </LinkContainer>\n\n                  <NavDropdown.Item onClick={logoutHandler}>\n                    Logout\n                  </NavDropdown.Item>\n                </NavDropdown>\n              ) : (\n                <LinkContainer to=\"/login\">\n                  <Nav.Link>\n                    <i className=\"fas fa-user\"></i>Login\n                  </Nav.Link>\n                </LinkContainer>\n              )}\n\n              {userInfo && userInfo.isAdmin && (\n                <NavDropdown title=\"Admin\" id=\"adminmenu\">\n                  <LinkContainer to=\"/admin/userlist\">\n                    <NavDropdown.Item>Users</NavDropdown.Item>\n                  </LinkContainer>\n                  <LinkContainer to=\"/admin/productlist\">\n                    <NavDropdown.Item>Products</NavDropdown.Item>\n                  </LinkContainer>\n                  <LinkContainer to=\"/admin/orderlist\">\n                    <NavDropdown.Item>Orders</NavDropdown.Item>\n                  </LinkContainer>\n                </NavDropdown>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    </header>\n  );\n}\n\nexport default Header;\n","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/ProfileScreen.js",["239","240","241","242"],[],"import React, { useState, useEffect } from \"react\";\nimport { Col, Row, Button, Form, Table } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport { updateUserProfile, getUserDetails } from \"../actions/userActions\";\nimport { USER_UPDATE_PROFILE_RESET } from \"../constants/userConstants\";\nimport { listMyOrders } from \"../actions/orderActions\";\n\nfunction ProfileScreen() {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const userDetails = useSelector((state) => state.userDetails);\n  const { loading, error, user } = userDetails;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const userUpdateProfile = useSelector((state) => state.userUpdateProfile);\n  const { success } = userUpdateProfile;\n  // 진심 success 이세기 뭔지 잘 모르겟음\n\n  const orderListMy = useSelector((state) => state.orderListMy);\n  const { loading: loadingOrders, error: errorOrders, orders } = orderListMy;\n\n  useEffect(() => {\n    if (!userInfo) {\n      navigate(\"/login\");\n    } else {\n      if (!user || !user.name || success) {\n        dispatch({ type: USER_UPDATE_PROFILE_RESET });\n        dispatch(getUserDetails(\"profile\"));\n        dispatch(listMyOrders());\n      } else {\n        setName(user.name);\n        setEmail(user.email);\n      }\n    }\n  }, [dispatch, userInfo, user]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n\n    if (password != confirmPassword) {\n      setMessage(\"Password does not match\");\n    } else {\n      dispatch(\n        updateUserProfile({\n          id: user._id,\n          name: name,\n          email: email,\n          password: password,\n        })\n      );\n      setMessage(\"\");\n    }\n  };\n\n  return (\n    <Row>\n      <Col md={3}>\n        <h2>User Profile</h2>\n\n        {message && <Message variant=\"danger\">{message}</Message>}\n        {error && <Message variant=\"danger\">{error}</Message>}\n        {loading && <Loader />}\n        <Form onSubmit={submitHandler}>\n          <Form.Group controlId=\"name\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              required\n              type=\"name\"\n              placeholder=\"Enter name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group controlId=\"email\">\n            <Form.Label>Email Address</Form.Label>\n            <Form.Control\n              required\n              type=\"email\"\n              placeholder=\"Enter Email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group controlId=\"password\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              placeholder=\"Enter Password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Form.Group controlId=\"passwordConfirm\">\n            <Form.Label>Confirm Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n\n          <Button type=\"submit\" variant=\"primary\">\n            Update\n          </Button>\n        </Form>\n      </Col>\n      <Col md={9}>\n        <h2>My orders</h2>\n        {loadingOrders ? (\n          <Loader />\n        ) : errorOrders ? (\n          <Message variant=\"danger\">{errorOrders}</Message>\n        ) : (\n          <Table striped responsive className=\"table-sm\">\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>Date</th>\n                <th>Total</th>\n                <th>Paid</th>\n                <th>Delivered</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {orders.map((order) => (\n                <tr key={order._id}>\n                  <td>{order._id}</td>\n                  <td>{order.createdAt.substring(0, 10)}</td>\n                  <td>${order.totalPrice}</td>\n                  <td>\n                    {order.isPaid ? (\n                      order.paidAt\n                    ) : (\n                      <i className=\"fas fa-times\" style={{ color: \"red\" }}></i>\n                    )}\n                  </td>\n                  <td>\n                    <LinkContainer to={`/order/${order._id}`}>\n                      <Button className=\"btn-sm\">Details</Button>\n                    </LinkContainer>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        )}\n      </Col>\n    </Row>\n  );\n}\n\nexport default ProfileScreen;\n","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/ShippingScreen.js",["243","244","245"],[],"import React, { useState, useEffect } from \"react\";\nimport { Col, Row, Form, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport FormContainer from \"../components/FormContainer\";\nimport { saveShippingAddress } from \"../actions/cartActions\";\nimport { useNavigate } from \"react-router-dom\";\nimport CheckoutSteps from \"../components/CheckoutSteps\";\n\nfunction ShippingScreen() {\n  const cart = useSelector((state) => state.cart);\n  const { shippingAddress } = cart;\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const [address, setAddress] = useState(shippingAddress.address);\n  const [city, setCity] = useState(shippingAddress.city);\n  const [postalCode, setPostalCode] = useState(shippingAddress.postalCode);\n  const [country, setCountry] = useState(shippingAddress.country);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(saveShippingAddress({ address, city, postalCode, country }));\n    navigate(\"/payment\");\n  };\n\n  return (\n    <FormContainer>\n      <CheckoutSteps step1 step2 />\n      <h1>Shipping</h1>\n      <Form onSubmit={submitHandler}>\n        <Form.Group controlId=\"address\">\n          <Form.Label>Address</Form.Label>\n          <Form.Control\n            required\n            type=\"text\"\n            placeholder=\"Enter address\"\n            value={address ? address : \"\"}\n            onChange={(e) => setAddress(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId=\"city\">\n          <Form.Label>City</Form.Label>\n          <Form.Control\n            required\n            type=\"text\"\n            placeholder=\"Enter city\"\n            value={city ? city : \"\"}\n            onChange={(e) => setCity(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId=\"postalCode\">\n          <Form.Label>Postal Code</Form.Label>\n          <Form.Control\n            required\n            type=\"text\"\n            placeholder=\"Enter postal code\"\n            value={postalCode ? postalCode : \"\"}\n            onChange={(e) => setPostalCode(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId=\"country\">\n          <Form.Label>Country</Form.Label>\n          <Form.Control\n            required\n            type=\"text\"\n            placeholder=\"Enter country\"\n            value={country ? country : \"\"}\n            onChange={(e) => setCountry(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Button type=\"submit\" variant=\"primary\">\n          Continue\n        </Button>\n      </Form>\n    </FormContainer>\n  );\n}\n\nexport default ShippingScreen;\n","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/PlaceOrderScreen.js",["246","247","248"],[],"import React, { useState, useEffect } from \"react\";\nimport {\n  Image,\n  Col,\n  Row,\n  Form,\n  Button,\n  Card,\n  ListGroup,\n} from \"react-bootstrap\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport CheckoutSteps from \"../components/CheckoutSteps\";\nimport Message from \"../components/Message\";\nimport { createOrder } from \"../actions/orderActions\";\nimport { ORDER_CREATE_RESET } from \"../constants/orderConstants\";\n\nfunction PlaceOrderScreen() {\n  const orderCreate = useSelector((state) => state.orderCreate);\n  const { order, error, success } = orderCreate;\n\n  const cart = useSelector((state) => state.cart);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  cart.itemsPrice = cart.cartItems\n    .reduce((acc, item) => acc + item.price * item.qty, 0)\n    .toFixed(2);\n\n  cart.shippingPrice = (cart.itemsPrice > 100 ? 0 : 10).toFixed(2);\n  cart.taxPrice = Number(0.082 * cart.itemsPrice).toFixed(2);\n\n  cart.totalPrice = (\n    Number(cart.itemsPrice) +\n    Number(cart.shippingPrice) +\n    Number(cart.taxPrice)\n  ).toFixed(2);\n\n  if (!cart.paymentMethod) {\n    navigate(\"/payment\");\n  }\n\n  useEffect(() => {\n    if (success) {\n      navigate(`/order/${order._id}`);\n      dispatch({ type: ORDER_CREATE_RESET });\n    }\n  }, [success]);\n\n  const placeOrder = () => {\n    dispatch(\n      createOrder({\n        orderItems: cart.cartItems,\n        shippingAddress: cart.shippingAddress,\n        paymentMethod: cart.paymentMethod,\n        itemsPrice: cart.itemsPrice,\n        shippingPrice: cart.shippingPrice,\n        taxPrice: cart.taxPrice,\n        totalPrice: cart.totalPrice,\n      })\n    );\n  };\n  return (\n    <div>\n      <CheckoutSteps step1 step2 step3 step4 />\n      <Row>\n        <Col md={8}>\n          <ListGroup variant=\"flush\">\n            <ListGroup.Item>\n              <h2>Shipping</h2>\n              <p>Shipping:</p>\n              {cart.shippingAddress.address}, {cart.shippingAddresscity}\n              {\"  \"}\n              {cart.shippingAddress.postalCode}\n              {\"  \"}\n              {cart.shippingAddress.country}\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <h2>Payment Method</h2>\n              <p>Method:</p>\n              {cart.paymentMethod}\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <h2>Order Items</h2>\n              {cart.cartItems.length === 0 ? (\n                <Message variant=\"info\"> Your cart is empty</Message>\n              ) : (\n                <ListGroup variant=\"flush\">\n                  {cart.cartItems.map((item, index) => (\n                    <ListGroup.Item key={index}>\n                      <Row>\n                        <Col md={1}>\n                          <Image\n                            src={item.image}\n                            alt={item.name}\n                            fluid\n                            rounded\n                          />\n                        </Col>\n                        <Col>\n                          <Link to={`'/product/${item}`}>{item.name}</Link>\n                        </Col>\n\n                        <Col md={4}>\n                          {item.qty} X ${(item.qty * item.price).toFixed(2)}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              )}\n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n\n        <Col md={4}>\n          <Card>\n            <ListGroup variant=\"flush\">\n              <ListGroup.Item>\n                <h2>Order Summary</h2>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Item</Col>\n                  <Col>${cart.itemsPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Shipping</Col>\n                  <Col>${cart.shippingPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Tax</Col>\n                  <Col>${cart.taxPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Total</Col>\n                  <Col>${cart.totalPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                {error && <Message variant=\"danger\">{error}</Message>}\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Button\n                  type=\"button\"\n                  className=\"btn-block\"\n                  disabled={cart.cartItems === 0}\n                  onClick={placeOrder}\n                >\n                  PLace orders\n                </Button>\n              </ListGroup.Item>\n            </ListGroup>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default PlaceOrderScreen;\n","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/OrderScreen.js",["249","250","251","252","253","254"],[],"import React, { useState, useEffect } from \"react\";\nimport {\n  Image,\n  Col,\n  Row,\n  Form,\n  Button,\n  Card,\n  ListGroup,\n} from \"react-bootstrap\";\nimport { useNavigate, Link, useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { getOrderDetails } from \"../actions/orderActions\";\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\n\nfunction OrderScreen() {\n  const { id } = useParams();\n  const dispatch = useDispatch();\n\n  const [sdkReady, setSdkReady] = useState(false);\n\n  const orderDetails = useSelector((state2) => state2.orderDetails);\n  const { order, error, loading } = orderDetails;\n\n  const orderPay = useSelector((state) => state.orderPay);\n  const { loading: loadingPay, success: successPay } = orderPay;\n\n  const orderDeliver = useSelector((state) => state.orderDeliver);\n  const { loading: loadingDeliver, success: successDeliver } = orderDeliver;\n\n  const useLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = useLogin;\n\n  if (!loading && !error) {\n    order.itemsPrice = order.orderItems\n      .reduce((acc, item) => acc + item.price * item.qty, 0)\n      .toFixed(2);\n  }\n\n  const addPayPalScript = () => {\n    console.log(\"hi\");\n  };\n\n  useEffect(() => {\n    if (!order || order._id !== Number(id)) {\n      dispatch(getOrderDetails(id));\n    }\n  }, [dispatch, order, id]);\n\n  const successPaymentHandler = () => {};\n\n  const deliverHandler = () => {};\n\n  return loading ? (\n    <Loader />\n  ) : error ? (\n    <Message variant=\"danger\">{error}</Message>\n  ) : (\n    <PayPalScriptProvider>\n      <h1>Order: {order._id} </h1>\n      <Row>\n        <Col md={8}>\n          <ListGroup variant=\"flush\">\n            <ListGroup.Item>\n              <h2>Shipping</h2>\n              <p>Name: {order.user.name}</p>\n              <p>\n                Email:{\" \"}\n                <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\n              </p>\n              <p>\n                Shipping:\n                {order.shippingAddress.address}, {order.shippingAddress.city}\n                {\"  \"}\n                {order.shippingAddress.postalCode}\n                {\"  \"}\n                {order.shippingAddress.country}\n              </p>\n\n              {order.isDelivered ? (\n                <Message variant=\"success\">\n                  Delivered on {order.DeliveredAt}\n                </Message>\n              ) : (\n                <Message variant=\"warning\">Not Delivered</Message>\n              )}\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <h2>Payment Method</h2>\n              <p>Method: {order.paymentMethod}</p>\n              {order.isPaid ? (\n                <Message variant=\"success\">Paid on {order.paidAt}</Message>\n              ) : (\n                <Message variant=\"warning\">Not Paid</Message>\n              )}\n            </ListGroup.Item>\n            <ListGroup.Item>\n              <h2>Order Items</h2>\n              {order.orderItems.length === 0 ? (\n                <Message variant=\"info\"> Order is empty</Message>\n              ) : (\n                <ListGroup variant=\"flush\">\n                  {order.orderItems.map((item, index) => (\n                    <ListGroup.Item key={index}>\n                      <Row>\n                        <Col md={1}>\n                          <Image\n                            src={item.image}\n                            alt={item.name}\n                            fluid\n                            rounded\n                          />\n                        </Col>\n                        <Col>\n                          <Link to={`'/product/${item}`}>{item.name}</Link>\n                        </Col>\n\n                        <Col md={4}>\n                          {item.qty} X ${(item.qty * item.price).toFixed(2)}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              )}\n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n\n        <Col md={4}>\n          <Card>\n            <ListGroup variant=\"flush\">\n              <ListGroup.Item>\n                <h2>Order Summary</h2>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Item</Col>\n                  <Col>${order.itemsPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Shipping</Col>\n                  <Col>${order.shippingPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Tax</Col>\n                  <Col>${order.taxPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Total</Col>\n                  <Col>${order.totalPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n              {!order.isPaid && (\n                <ListGroup.Item>\n                  {!loadingPay && <Loader />}\n                  {!sdkReady ? (\n                    <Loader />\n                  ) : (\n                    <PayPalButtons\n                      amount={order.totalPrice}\n                      onSuccess={successPaymentHandler}\n                    />\n                  )}\n                </ListGroup.Item>\n              )}\n            </ListGroup>\n            {loadingDeliver && <Loader />}\n            {userInfo &&\n              userInfo.isAdmin &&\n              order.isPaid &&\n              !order.isDelivered && (\n                <ListGroup.Item\n                  type=\"button\"\n                  className=\"btn btn-block\"\n                  onClick={deliverHandler}\n                >\n                  <Button>Mark as Delivered</Button>\n                </ListGroup.Item>\n              )}\n          </Card>\n        </Col>\n      </Row>\n    </PayPalScriptProvider>\n  );\n}\n\nexport default OrderScreen;\n","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/ProductScreen.js",["255","256"],[],"import React, { useState, useEffect } from \"react\";\nimport { Link, useParams, useNavigate } from \"react-router-dom\";\nimport {\n  Row,\n  Col,\n  Image,\n  ListGroup,\n  Button,\n  Card,\n  Form,\n} from \"react-bootstrap\";\nimport Rating from \"../components/Rating\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { listProductDetails } from \"../actions/productActions\";\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport { PRODUCT_CREATE_REVIEW_RESET } from \"../constants/productConstants\";\nimport { createProductReview } from \"../actions/productActions\";\n\nfunction ProductScreen() {\n  const [qty, setQty] = useState(1);\n  const [rating, setRating] = useState(0);\n  const [comment, setComment] = useState(\"\");\n\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  // const [product, setProduct] = useState([]);\n\n  const productDetails = useSelector((state) => state.productDetails);\n  const { loading, error, product } = productDetails;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const productReviewCreate = useSelector((state) => state.productReviewCreate);\n  const {\n    loading: loadingProductReview,\n    error: errorProductReview,\n    success: successProductReview,\n  } = productReviewCreate;\n\n  const addToCartHandler = () => {\n    navigate(`/cart/${id}?qty=${qty}`);\n    // 얘가 cart 앞에 / 를 안 붙이면 그 경로에서 navigate 경로로 이동하고\n    // cart 앞에 / 를 붙이면 경로가 초기화되서 navigate 경로로 이동한다\n  };\n\n  useEffect(() => {\n    // async function fetchProduct() {\n    //     const { data } = await axios.get(`/api/products/${id}`)\n    //     setProduct(data)\n    // }\n\n    // fetchProduct()\n\n    if (successProductReview) {\n      setRating(0);\n      setComment(\"\");\n      dispatch({ type: PRODUCT_CREATE_REVIEW_RESET });\n    }\n\n    dispatch(listProductDetails(id));\n  }, [dispatch, successProductReview]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(\n      createProductReview(id, {\n        rating,\n        comment,\n      })\n    );\n  };\n\n  return (\n    <div>\n      <Link to=\"/\" className=\"btn btn-light\">\n        Go Back\n      </Link>\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant=\"danger\">{error}</Message>\n      ) : (\n        <div>\n          <Row>\n            <Col md={6}>\n              <Image src={product.image} alt={product.name} />\n            </Col>\n\n            <Col md={3}>\n              <ListGroup variant=\"flush\">\n                <ListGroup.Item>\n                  <h3>{product.name}</h3>\n                </ListGroup.Item>\n\n                <ListGroup.Item>\n                  <Rating\n                    value={product.rating}\n                    text={`${product.numReviews} reviews`}\n                    color={\"#f8e825\"}\n                  />\n                </ListGroup.Item>\n\n                <ListGroup.Item>Price: ${product.price}</ListGroup.Item>\n\n                <ListGroup.Item>\n                  Description: ${product.description}\n                </ListGroup.Item>\n              </ListGroup>\n            </Col>\n\n            <Col md={3}>\n              <Card>\n                <ListGroup variant=\"flush\">\n                  <ListGroup.Item>\n                    <Row>\n                      <Col>Prices:</Col>\n                      <Col>${product.price}</Col>\n                    </Row>\n                  </ListGroup.Item>\n                  <ListGroup.Item>\n                    <Row>\n                      <Col>Status:</Col>\n                      <Col>\n                        {product.countInStock > 0 ? \"In stock\" : \"Out of Stock\"}\n                      </Col>\n                    </Row>\n                  </ListGroup.Item>\n\n                  {product.countInStock > 0 && (\n                    <ListGroup.Item>\n                      <Row>\n                        <Col>Qty</Col>\n                        <Col xs=\"auto\" className=\"my-1\">\n                          <Form.Control\n                            as=\"select\"\n                            value={qty}\n                            onChange={(e) => setQty(e.target.value)}\n                          >\n                            {[...Array(product.countInStock).keys()].map(\n                              (x) => (\n                                <option key={x + 1} value={x + 1}>\n                                  {x + 1}\n                                </option>\n                              )\n                            )}\n                          </Form.Control>\n                          {/* 얘가 수량 설정 코드 Form */}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  )}\n\n                  <ListGroup.Item>\n                    <Button\n                      onClick={addToCartHandler}\n                      className=\"btn-block\"\n                      disabled={product.countInStock == 0}\n                      type=\"button\"\n                    >\n                      Add to Cart\n                    </Button>\n                  </ListGroup.Item>\n                </ListGroup>\n              </Card>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md={6}>\n              <h4>Reviews</h4>\n              {product.reviews.length === 0 && (\n                <Message variant=\"info\">No Reviews</Message>\n              )}\n\n              <ListGroup variant=\"flush\">\n                {product.reviews.map((review) => (\n                  <ListGroup.Item key={review._id}>\n                    {review.name}\n                    <Rating value={review.rating} color=\"#f8e825\" />\n                    {/* <p>{review.createdAt.substring(0, 10)}</p>  substring 을 못 읽네*/}\n                    <p>{review.comment}</p>\n                  </ListGroup.Item>\n                ))}\n\n                <ListGroup.Item>\n                  <h4>Write a review</h4>\n\n                  {loadingProductReview && <Loader />}\n                  {successProductReview && (\n                    <Message variant=\"success\">Review Submitted</Message>\n                  )}\n                  {errorProductReview && (\n                    <Message variant=\"danger\">{errorProductReview}</Message>\n                  )}\n\n                  {userInfo ? (\n                    <Form onSubmit={submitHandler}>\n                      <Form.Group controlId=\"rating\">\n                        <Form.Label>Rating</Form.Label>\n                        <Form.Control\n                          as=\"select\"\n                          value={rating}\n                          onChange={(e) => setRating(e.target.value)}\n                        >\n                          <option value=\"\">Select...</option>\n                          <option value=\"1\">1 - Poor</option>\n                          <option value=\"2\">2 - Fair</option>\n                          <option value=\"3\">3 - Good</option>\n                          <option value=\"4\">4 - Very Good</option>\n                          <option value=\"5\">5 - Excellent</option>\n                        </Form.Control>\n                      </Form.Group>\n\n                      <Form.Group controlId=\"comment\">\n                        <Form.Label>Review</Form.Label>\n                        <Form.Control\n                          as=\"textarea\"\n                          row=\"5\"\n                          value={comment}\n                          onChange={(e) => setComment(e.target.value)}\n                        ></Form.Control>\n                      </Form.Group>\n                      <Button\n                        disabled={loadingProductReview}\n                        type=\"submit\"\n                        variant=\"primary\"\n                      >\n                        Submit\n                      </Button>\n                    </Form>\n                  ) : (\n                    <Message>\n                      Please <Link to=\"/login\">login</Link> to write a review\n                    </Message>\n                  )}\n                </ListGroup.Item>\n              </ListGroup>\n            </Col>\n          </Row>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ProductScreen;\n","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/OrderListScreen.js",["257","258"],[],"import React, { useState, useEffect } from \"react\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { Table, Button } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { listOrders } from \"../actions/orderActions\";\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\n\nfunction OrderListScreen() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const orderList = useSelector((state) => state.orderList);\n  const { loading, error, orders } = orderList;\n\n  useEffect(() => {\n    if (userInfo && userInfo.isAdmin) {\n      dispatch(listOrders());\n    } else {\n      navigate(\"/login\");\n    }\n  }, [dispatch, userInfo]);\n\n  return (\n    <div>\n      <h1>Orders</h1>\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant=\"danger\">{error}</Message>\n      ) : (\n        <Table striped bordered hover responsive className=\"table-sm\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>USER</th>\n              <th>DATE</th>\n              <th>Total</th>\n              <th>PAID</th>\n              <th>DELIVERED</th>\n              <th></th>\n            </tr>\n          </thead>\n          {/* substring 십새끼 */}\n          <tbody>\n            {orders.map((order) => (\n              <tr key={order._id}>\n                <td>{order._id}</td>\n                <td>{order.user && order.user.name}</td>\n                <td>{order.createdAt.substring(0, 10)}</td>\n                <td>${order.totalPrice}</td>\n\n                <td>\n                  {order.isPaid ? (\n                    order.paidAt.substring(0, 10)\n                  ) : (\n                    <i className=\"fas fa-check\" style={{ color: \"red\" }}></i>\n                  )}\n                </td>\n\n                <td>\n                  {order.isDelivered ? (\n                    order.deliveredAt.substring(0, 10)\n                  ) : (\n                    <i className=\"fas fa-check\" style={{ color: \"red\" }}></i>\n                  )}\n                </td>\n\n                <td>\n                  <LinkContainer to={`/order/${order._id}`}>\n                    <Button variant=\"light\" className=\"btn-sm\">\n                      Details\n                    </Button>\n                  </LinkContainer>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      )}\n    </div>\n  );\n}\n\nexport default OrderListScreen;\n","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/ProductListScreen.js",["259","260"],[],"import React, { useState, useEffect } from \"react\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { Col, Row, Button, Table } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport {\n  createProduct,\n  deleteProduct,\n  listProducts,\n} from \"../actions/productActions\";\nimport { useNavigate } from \"react-router-dom\";\nimport { PRODUCT_CREATE_RESET } from \"../constants/productConstants\";\n\nfunction ProductListScreen() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const productList = useSelector((state) => state.productList);\n  const { loading, error, products } = productList;\n\n  const productDelete = useSelector((state) => state.productDelete);\n  const {\n    loading: loadingDelete,\n    error: errorDelete,\n    success: successDelete,\n  } = productDelete;\n\n  const productCreate = useSelector((state) => state.productCreate);\n  const {\n    loading: loadingCreate,\n    error: errorCreate,\n    success: successCreate,\n    product: createdProduct,\n  } = productCreate;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  useEffect(() => {\n    dispatch({ type: PRODUCT_CREATE_RESET });\n\n    if (!userInfo.isAdmin) {\n      navigate(\"/login\");\n    }\n\n    if (successCreate) {\n      navigate(`/admin/product/${createdProduct._id}/edit`);\n    } else {\n      dispatch(listProducts());\n    }\n  }, [dispatch, userInfo, successDelete, successCreate, createdProduct]);\n\n  const createProductHandler = (product) => {\n    dispatch(createProduct());\n    navigate(\"/admin/productlist\");\n  };\n\n  const deleteHandler = (id) => {\n    if (window.confirm(\"Are you sure you want to delete this product?\")) {\n      dispatch(deleteProduct(id));\n    }\n  };\n\n  return (\n    <div>\n      <Row className=\"align-items-center\">\n        <Col>\n          <h1>Products</h1>\n        </Col>\n\n        <Col className=\"text-right\">\n          <Button className=\"my-3\" onClick={createProductHandler}>\n            <i className=\"fas fa-plus\"></i> Create Product\n          </Button>\n        </Col>\n      </Row>\n\n      {loadingDelete && <Loader />}\n      {errorDelete && <Message variant=\"danger\">{errorDelete}</Message>}\n\n      {loadingCreate && <Loader />}\n      {errorCreate && <Message variant=\"danger\">{errorCreate}</Message>}\n\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant=\"danger\">{error}</Message>\n      ) : (\n        <div>\n          <Table striped bordered hover responsive className=\"table-sm\">\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>NAME</th>\n                <th>PRICE</th>\n                <th>CATEGORY</th>\n                <th>BRAND</th>\n                <th></th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {products.map((product) => (\n                <tr key={product._id}>\n                  <td>{product._id}</td>\n                  <td>{product.name}</td>\n                  <td>${product.price}</td>\n                  <td>{product.category}</td>\n                  <td>{product.brand}</td>\n\n                  <td>\n                    <LinkContainer to={`/admin/product/${product._id}/edit`}>\n                      <Button variant=\"light\" className=\"btn-sm\">\n                        <i className=\"fas fa-edit\"></i>\n                      </Button>\n                    </LinkContainer>\n\n                    <Button\n                      variant=\"danger\"\n                      className=\"btn-sm\"\n                      onClick={() => deleteHandler(product._id)}\n                    >\n                      <i className=\"fas fa-trash\"></i>\n                    </Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n          {/* <Paginate pages={pages} page={page} isAdmin={true} /> */}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ProductListScreen;\n","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/ProductEditScreen.js",["261","262","263","264"],[],"import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams, Link } from \"react-router-dom\";\nimport { Form, Button } from \"react-bootstrap\";\nimport { PRODUCT_UPDATE_RESET } from \"../constants/productConstants\";\nimport { listProductDetails, updateProduct } from \"../actions/productActions\";\nimport FormContainer from \"../components/FormContainer\";\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport axios from \"axios\";\n\nfunction ProductEditScreen() {\n  const { id } = useParams();\n\n  const [name, setName] = useState(\"\");\n  const [price, setPrice] = useState(0);\n  const [image, setImage] = useState(\"\");\n  const [brand, setBrand] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [countInStock, setCountInStock] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [uploading, setUploading] = useState(false);\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const productDetails = useSelector((state) => state.productDetails);\n  const { error, loading, product } = productDetails;\n\n  const productUpdate = useSelector((state) => state.productUpdate);\n  const {\n    error: errorUpdate,\n    loading: loadingUpdate,\n    success: successUpdate,\n  } = productUpdate;\n\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({ type: PRODUCT_UPDATE_RESET });\n      navigate(\"/admin/productlist\");\n    } else {\n      if (!product.name || product._id !== Number(id)) {\n        dispatch(listProductDetails(id));\n      } else {\n        setName(product.name);\n        setPrice(product.price);\n        setImage(product.image);\n        setBrand(product.brand);\n        setCategory(product.category);\n        setCountInStock(product.countInStock);\n        setDescription(product.description);\n      }\n    }\n  }, [dispatch, product, id, successUpdate]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(\n      updateProduct({\n        _id: id,\n        name,\n        price,\n        image,\n        brand,\n        category,\n        countInStock,\n        description,\n      })\n    );\n  };\n\n  const uploadFileHandler = async (e) => {\n    const file = e.target.file[0];\n    const formData = new FormData();\n\n    formData.append(\"image\", file);\n    formData.append(\"id\", id);\n\n    setUploading(true);\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"multipart/form-data\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/products/upload/\",\n        formData,\n        config\n      );\n    } catch (error) {\n      setUploading(false);\n    }\n  };\n\n  return (\n    <div>\n      <Link to=\"/admin/productlist\">Go Back</Link>\n\n      <FormContainer>\n        <h1>Edit Product</h1>\n        {loadingUpdate && <Loader />}\n        {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}\n\n        {loading ? (\n          <Loader />\n        ) : error ? (\n          <Message variant=\"danger\">{error}</Message>\n        ) : (\n          <Form onSubmit={submitHandler}>\n            <Form.Group>\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                type=\"name\"\n                placeholder=\"Enter name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>Price</Form.Label>\n              <Form.Control\n                type=\"number\"\n                placeholder=\"Enter price\"\n                value={price}\n                onChange={(e) => setPrice(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"image\">\n              <Form.Label>Image</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter image\"\n                value={image}\n                onChange={(e) => setImage(e.target.value)}\n                readOnly\n              />\n\n              {/* <Form.File\n                id=\"image-file\"\n                label=\"Choose File\"\n                custom\n                onChange={uploadFileHandler}\n              ></Form.File>\n              {uploading && <Loader />} */}\n            </Form.Group>\n\n            <Form.Group controlId=\"brand\">\n              <Form.Label>Brand</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter brand\"\n                value={brand}\n                onChange={(e) => setBrand(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"countinstock\">\n              <Form.Label>Stock</Form.Label>\n              <Form.Control\n                type=\"number\"\n                placeholder=\"Enter stock\"\n                value={countInStock}\n                onChange={(e) => setCountInStock(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"category\">\n              <Form.Label>Category</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter category\"\n                value={category}\n                onChange={(e) => setCategory(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>Description</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter description\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Button type=\"submit\" variant=\"primary\">\n              Update\n            </Button>\n          </Form>\n        )}\n      </FormContainer>\n    </div>\n  );\n}\n\nexport default ProductEditScreen;\n","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/UserEditScreen.js",["265","266","267"],[],"import React, { useState, useEffect } from \"react\";\nimport { useNavigate, useParams, Link } from \"react-router-dom\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport FormContainer from \"../components/FormContainer\";\nimport { getUserDetails, updateUser } from \"../actions/userActions\";\nimport { USER_UPDATE_RESET } from \"../constants/userConstants\";\n\nfunction UserEditScreen() {\n  const { id } = useParams();\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const userDetails = useSelector((state) => state.userDetails);\n  const { error, loading, user } = userDetails;\n\n  const userUpdate = useSelector((state) => state.userUpdate);\n  const {\n    error: errorUpdate,\n    loading: loadingUpdate,\n    success: successUpdate,\n  } = userUpdate;\n\n  useEffect(() => {\n    if (!user.name || user._id !== Number(id)) {\n      dispatch(getUserDetails(id));\n    } else {\n      setName(user.name);\n      setEmail(user.email);\n      setIsAdmin(user.isAdmin);\n    }\n  }, []);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(updateUser({ _id: user._id, name, email, isAdmin }));\n    navigate(\"/admin/userlist\");\n  };\n\n  return (\n    <div>\n      <Link to=\"/admin/userlist\">Go Back</Link>\n\n      <FormContainer>\n        <h1>Edit User</h1>\n        {loadingUpdate && <Loader />}\n        {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}\n\n        {loading ? (\n          <Loader />\n        ) : error ? (\n          <Message variant=\"danger\">{error}</Message>\n        ) : (\n          <Form onSubmit={submitHandler}>\n            <Form.Group controlId=\"name\">\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                type=\"name\"\n                placeholder=\"Enter name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"email\">\n              <Form.Label>Email Address</Form.Label>\n              <Form.Control\n                type=\"email\"\n                placeholder=\"Enter Email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"isadmin\">\n              <Form.Check\n                type=\"checkbox\"\n                label=\"Is Admin\"\n                checked={isAdmin}\n                onChange={(e) => setIsAdmin(e.target.checked)}\n              ></Form.Check>\n            </Form.Group>\n\n            <Button type=\"submit\" variant=\"primary\">\n              Update\n            </Button>\n          </Form>\n        )}\n      </FormContainer>\n    </div>\n  );\n}\n\nexport default UserEditScreen;\n","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/screens/UserListScreen.js",["268","269","270"],[],"import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { Col, Row, Button, Table } from \"react-bootstrap\";\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport { deleteUser, listUsers } from \"../actions/userActions\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction UserListScreen() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const userList = useSelector((state) => state.userList);\n  const { loading, error, users } = userList;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  useEffect(() => {\n    if (userInfo && userInfo.isAdmin) {\n      dispatch(listUsers());\n    } else {\n      navigate(\"/login\");\n    }\n  }, [dispatch]);\n\n  const deleteHandler = (id) => {\n    if (window.confirm(\"Are you sure you want to delete this user?\")) {\n      dispatch(deleteUser(id));\n    }\n  };\n\n  return (\n    <div>\n      <h1>Users</h1>\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant=\"danger\">{error}</Message>\n      ) : (\n        <Table striped bordered hover responsive className=\"table-sm\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>NAME</th>\n              <th>EMAIL</th>\n              <th>ADMIN</th>\n              <th></th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {users.map((user) => (\n              <tr key={user._id}>\n                <td>{user._id}</td>\n                <td>{user.name}</td>\n                <td>{user.email}</td>\n                <td>\n                  {user.isAdmin ? (\n                    <i className=\"fas fa-check\" style={{ color: \"green\" }}></i>\n                  ) : (\n                    <i className=\"fas fa-check\" style={{ color: \"red\" }}></i>\n                  )}\n                </td>\n\n                <td>\n                  <LinkContainer to={`/admin/user/${user._id}/edit`}>\n                    <Button variant=\"light\" className=\"btn-sm\">\n                      <i className=\"fas fa-edit\"></i>\n                    </Button>\n                  </LinkContainer>\n\n                  <Button\n                    variant=\"danger\"\n                    className=\"btn-sm\"\n                    onClick={() => deleteHandler(user._id)}\n                  >\n                    <i className=\"fas fa-trash\"></i>\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      )}\n    </div>\n  );\n}\n\nexport default UserListScreen;\n","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/reducers/cartReducers.js",[],[],"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/reducers/productReducers.js",[],[],"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/reducers/orderReducers.js",[],[],"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/reducers/userReducers.js",[],[],"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/components/Message.js",[],[],"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/components/FormContainer.js",[],[],"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/components/Loader.js",[],[],"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/components/Product.js",[],[],"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/components/CheckoutSteps.js",[],[],"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/components/Rating.js",[],[],"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/actions/cartActions.js",[],[],"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/actions/userActions.js",["271","272","273","274"],[],"import {\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGIN_FAIL,\n  USER_LOGOUT,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS,\n  USER_REGISTER_FAIL,\n  USER_DETAILS_REQUEST,\n  USER_DETAILS_SUCCESS,\n  USER_DETAILS_FAIL,\n  USER_UPDATE_PROFILE_REQUEST,\n  USER_UPDATE_PROFILE_SUCCESS,\n  USER_UPDATE_PROFILE_FAIL,\n  USER_UPDATE_PROFILE_RESET,\n  USER_DETAILS_RESET,\n  USER_LIST_REQUEST,\n  USER_LIST_SUCCESS,\n  USER_LIST_FAIL,\n  USER_LIST_RESET,\n  USER_DELETE_REQUEST,\n  USER_DELETE_SUCCESS,\n  USER_DELETE_FAIL,\n  USER_UPDATE_REQUEST,\n  USER_UPDATE_SUCCESS,\n  USER_UPDATE_FAIL,\n  USER_UPDATE_RESET,\n} from \"../constants/userConstants\";\nimport axios from \"axios\";\nimport { ORDER_LIST_MY_RESET } from \"../constants/orderConstants\";\n\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST,\n    });\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n    };\n\n    const { data } = await axios.post(\n      \"/api/users/login/\",\n      { username: email, password: password },\n      config\n    );\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    });\n\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n\n    // set the data in state and local storage\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.meesage,\n    });\n  }\n};\n\nexport const logout = () => (dispatch) => {\n  localStorage.removeItem(\"userInfo\");\n  localStorage.removeItem(\"cartItems\");\n  localStorage.removeItem(\"shippingAddress\");\n  dispatch({ type: USER_LOGOUT });\n  dispatch({ type: USER_DETAILS_RESET });\n  dispatch({ type: ORDER_LIST_MY_RESET });\n  dispatch({ type: USER_LIST_RESET });\n};\n\nexport const register = (name, email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST,\n    });\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n    };\n\n    const { data } = await axios.post(\n      \"/api/users/register/\",\n      { name: name, email: email, password: password },\n      config\n    );\n\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data,\n    });\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    });\n\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.get(`api/users/${id}`, config);\n\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.meesage,\n    });\n  }\n};\n\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n    // 500 에러는 headers 가 없어도 발생하는데 어쩄뜬 연결 단자가 안 맞다는 소리다\n\n    const { data } = await axios.put(\n      \"/api/users/profile/update/\",\n      user,\n      config\n    );\n\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data,\n    });\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    });\n    // 프로필이 업데이트 됬기때문에 로그인을 해줘야함\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\nexport const listUsers = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.get(`/api/users/`, config);\n\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\nexport const updateUser = (user) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.put(\n      `/api/users/update/${user._id}/`,\n      user,\n      config\n    );\n\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n    });\n\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\nexport const deleteUser = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DELETE_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.delete(`/api/users/delete/${id}/`, config);\n    dispatch({\n      type: USER_DELETE_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/constants/userConstants.js",[],[],"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/constants/orderConstants.js",[],[],"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/actions/orderActions.js",["275","276","277"],[],"import axios from \"axios\";\nimport { CART_CLEAR_ITEMS } from \"../constants/cartConstants\";\nimport {\n  ORDER_CREATE_REQUEST,\n  ORDER_CREATE_SUCCESS,\n  ORDER_CREATE_FAIL,\n  ORDER_DETAILS_REQUEST,\n  ORDER_DETAILS_SUCCESS,\n  ORDER_DETAILS_FAIL,\n  ORDER_PAY_REQUEST,\n  ORDER_PAY_SUCCESS,\n  ORDER_PAY_FAIL,\n  ORDER_CREATE_RESET,\n  ORDER_LIST_MY_REQUEST,\n  ORDER_LIST_MY_SUCCESS,\n  ORDER_LIST_MY_FAIL,\n  ORDER_LIST_MY_RESET,\n  ORDER_LIST_REQUEST,\n  ORDER_LIST_SUCCESS,\n  ORDER_LIST_FAIL,\n  ORDER_DELIVER_REQUEST,\n  ORDER_DELIVER_FAIL,\n} from \"../constants/orderConstants\";\n\nexport const createOrder = (order) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.post(`/api/orders/add/`, order, config);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data,\n    });\n\n    dispatch({\n      type: CART_CLEAR_ITEMS,\n      payload: data,\n    });\n\n    localStorage.removeItem(\"cartItems\");\n  } catch (error) {\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DETAILS_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.get(`/api/orders/${id}/`, config);\n\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\nexport const deliverOrder = (orderId) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DELIVER_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.put(\n      `/api/orders/${orderId}/deliver/`,\n      {},\n      config\n    );\n\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DELIVER_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\nexport const payOrder = (id, paymentResult) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.put(\n      `api/orders/${id}/pay/`,\n      paymentResult,\n      config\n    );\n\n    dispatch({\n      type: ORDER_PAY_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_PAY_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\nexport const listMyOrders = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_LIST_MY_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.get(\"/api/orders/myorders/\", config);\n\n    dispatch({\n      type: ORDER_LIST_MY_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_LIST_MY_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\nexport const listOrders = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_LIST_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.get(\"/api/orders/\", config);\n\n    dispatch({\n      type: ORDER_LIST_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_LIST_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/constants/productConstants.js",[],[],"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/actions/productActions.js",["278","279","280"],[],"import {\n  PRODUCT_LIST_REQUEST,\n  PRODUCT_LIST_SUCCESS,\n  PRODUCT_LIST_FAIL,\n  PRODUCT_DETAILS_REQUEST,\n  PRODUCT_DETAILS_SUCCESS,\n  PRODUCT_DETAILS_FAIL,\n  PRODUCT_DELETE_REQUEST,\n  PRODUCT_DELETE_FAIL,\n  PRODUCT_DELETE_SUCCESS,\n  PRODUCT_CREATE_REQUEST,\n  PRODUCT_CREATE_SUCCESS,\n  PRODUCT_CREATE_RESET,\n  PRODUCT_CREATE_FAIL,\n  PRODUCT_UPDATE_REQUEST,\n  PRODUCT_UPDATE_SUCCESS,\n  PRODUCT_UPDATE_FAIL,\n  PRODUCT_CREATE_REVIEW_RESET,\n  PRODUCT_CREATE_REVIEW_REQUEST,\n  PRODUCT_CREATE_REVIEW_SUCCESS,\n  PRODUCT_CREATE_REVIEW_FAIL,\n} from \"../constants/productConstants\";\n\nimport axios from \"axios\";\n\nexport const listProducts = () => async (dispatch) => {\n  try {\n    dispatch({ type: PRODUCT_LIST_REQUEST });\n\n    const { data } = await axios.get(\"/api/products/\");\n\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\nexport const listProductDetails = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: PRODUCT_DETAILS_REQUEST });\n\n    const { data } = await axios.get(`/api/products/${id}`);\n\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.response,\n    });\n  }\n};\n\nexport const deleteProduct = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_DELETE_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.delete(`/api/products/delete/${id}/`, config);\n\n    dispatch({\n      type: PRODUCT_DELETE_SUCCESS,\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DELETE_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\nexport const createProduct = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_CREATE_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.post(\"/api/products/create/\", {}, config);\n\n    dispatch({\n      type: PRODUCT_CREATE_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_CREATE_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\nexport const updateProduct = (product) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_UPDATE_REQUEST,\n    });\n\n    const {\n      userLogin: { userInfo },\n    } = getState();\n\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    };\n\n    const { data } = await axios.put(\n      `/api/products/update/${product._id}/`,\n      product,\n      config\n    );\n\n    dispatch({\n      type: PRODUCT_UPDATE_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_UPDATE_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\nexport const createProductReview =\n  (id, review) => async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: PRODUCT_CREATE_REVIEW_REQUEST,\n      });\n\n      const {\n        userLogin: { userInfo },\n      } = getState();\n\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${userInfo.token}`,\n        },\n      };\n\n      const { data } = await axios.post(\n        `/api/products/${id}/reviews/`,\n        review,\n        config\n      );\n\n      dispatch({\n        type: PRODUCT_CREATE_REVIEW_SUCCESS,\n        payload: data,\n      });\n    } catch (error) {\n      dispatch({\n        type: PRODUCT_CREATE_REVIEW_FAIL,\n        payload:\n          error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n      });\n    }\n  };\n","/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/constants/cartConstants.js",[],[],"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/components/SearchBox.js",[],[],"/Users/gatsby/Downloads/projects/ecommerce/backend/frontend/src/components/Paginate.js",[],[],{"ruleId":"281","severity":1,"message":"282","line":1,"column":10,"nodeType":"283","messageId":"284","endLine":1,"endColumn":25},{"ruleId":"281","severity":1,"message":"285","line":1,"column":27,"nodeType":"283","messageId":"284","endLine":1,"endColumn":42},{"ruleId":"281","severity":1,"message":"286","line":4,"column":10,"nodeType":"283","messageId":"284","endLine":4,"endColumn":29},{"ruleId":"281","severity":1,"message":"287","line":1,"column":17,"nodeType":"283","messageId":"284","endLine":1,"endColumn":25},{"ruleId":"288","severity":1,"message":"289","line":33,"column":6,"nodeType":"290","endLine":33,"endColumn":26,"suggestions":"291"},{"ruleId":"281","severity":1,"message":"287","line":1,"column":17,"nodeType":"283","messageId":"284","endLine":1,"endColumn":25},{"ruleId":"288","severity":1,"message":"289","line":30,"column":6,"nodeType":"290","endLine":30,"endColumn":26,"suggestions":"292"},{"ruleId":"293","severity":1,"message":"294","line":35,"column":18,"nodeType":"295","messageId":"296","endLine":35,"endColumn":20},{"ruleId":"281","severity":1,"message":"297","line":1,"column":27,"nodeType":"283","messageId":"284","endLine":1,"endColumn":36},{"ruleId":"281","severity":1,"message":"298","line":2,"column":10,"nodeType":"283","messageId":"284","endLine":2,"endColumn":15},{"ruleId":"281","severity":1,"message":"299","line":9,"column":8,"nodeType":"283","messageId":"284","endLine":9,"endColumn":17},{"ruleId":"281","severity":1,"message":"300","line":5,"column":10,"nodeType":"283","messageId":"284","endLine":5,"endColumn":14},{"ruleId":"281","severity":1,"message":"301","line":5,"column":16,"nodeType":"283","messageId":"284","endLine":5,"endColumn":27},{"ruleId":"288","severity":1,"message":"302","line":48,"column":6,"nodeType":"290","endLine":48,"endColumn":32,"suggestions":"303"},{"ruleId":"293","severity":1,"message":"294","line":53,"column":18,"nodeType":"295","messageId":"296","endLine":53,"endColumn":20},{"ruleId":"281","severity":1,"message":"297","line":1,"column":27,"nodeType":"283","messageId":"284","endLine":1,"endColumn":36},{"ruleId":"281","severity":1,"message":"304","line":2,"column":10,"nodeType":"283","messageId":"284","endLine":2,"endColumn":13},{"ruleId":"281","severity":1,"message":"305","line":2,"column":15,"nodeType":"283","messageId":"284","endLine":2,"endColumn":18},{"ruleId":"281","severity":1,"message":"287","line":1,"column":17,"nodeType":"283","messageId":"284","endLine":1,"endColumn":25},{"ruleId":"281","severity":1,"message":"306","line":6,"column":3,"nodeType":"283","messageId":"284","endLine":6,"endColumn":7},{"ruleId":"288","severity":1,"message":"307","line":48,"column":6,"nodeType":"290","endLine":48,"endColumn":15,"suggestions":"308"},{"ruleId":"281","severity":1,"message":"306","line":6,"column":3,"nodeType":"283","messageId":"284","endLine":6,"endColumn":7},{"ruleId":"281","severity":1,"message":"309","line":11,"column":10,"nodeType":"283","messageId":"284","endLine":11,"endColumn":21},{"ruleId":"281","severity":1,"message":"310","line":22,"column":20,"nodeType":"283","messageId":"284","endLine":22,"endColumn":31},{"ruleId":"281","severity":1,"message":"311","line":28,"column":41,"nodeType":"283","messageId":"284","endLine":28,"endColumn":51},{"ruleId":"281","severity":1,"message":"312","line":31,"column":45,"nodeType":"283","messageId":"284","endLine":31,"endColumn":59},{"ruleId":"281","severity":1,"message":"313","line":42,"column":9,"nodeType":"283","messageId":"284","endLine":42,"endColumn":24},{"ruleId":"288","severity":1,"message":"314","line":64,"column":6,"nodeType":"290","endLine":64,"endColumn":38,"suggestions":"315"},{"ruleId":"293","severity":1,"message":"316","line":160,"column":54,"nodeType":"295","messageId":"296","endLine":160,"endColumn":56},{"ruleId":"281","severity":1,"message":"287","line":1,"column":17,"nodeType":"283","messageId":"284","endLine":1,"endColumn":25},{"ruleId":"288","severity":1,"message":"289","line":26,"column":6,"nodeType":"290","endLine":26,"endColumn":26,"suggestions":"317"},{"ruleId":"281","severity":1,"message":"287","line":1,"column":17,"nodeType":"283","messageId":"284","endLine":1,"endColumn":25},{"ruleId":"288","severity":1,"message":"289","line":52,"column":6,"nodeType":"290","endLine":52,"endColumn":72,"suggestions":"318"},{"ruleId":"281","severity":1,"message":"319","line":22,"column":10,"nodeType":"283","messageId":"284","endLine":22,"endColumn":19},{"ruleId":"288","severity":1,"message":"289","line":54,"column":6,"nodeType":"290","endLine":54,"endColumn":44,"suggestions":"320"},{"ruleId":"281","severity":1,"message":"321","line":72,"column":9,"nodeType":"283","messageId":"284","endLine":72,"endColumn":26},{"ruleId":"281","severity":1,"message":"322","line":88,"column":15,"nodeType":"283","messageId":"284","endLine":88,"endColumn":19},{"ruleId":"281","severity":1,"message":"323","line":9,"column":10,"nodeType":"283","messageId":"284","endLine":9,"endColumn":27},{"ruleId":"281","severity":1,"message":"324","line":28,"column":14,"nodeType":"283","messageId":"284","endLine":28,"endColumn":27},{"ruleId":"288","severity":1,"message":"325","line":39,"column":6,"nodeType":"290","endLine":39,"endColumn":8,"suggestions":"326"},{"ruleId":"281","severity":1,"message":"304","line":4,"column":10,"nodeType":"283","messageId":"284","endLine":4,"endColumn":13},{"ruleId":"281","severity":1,"message":"305","line":4,"column":15,"nodeType":"283","messageId":"284","endLine":4,"endColumn":18},{"ruleId":"288","severity":1,"message":"327","line":25,"column":6,"nodeType":"290","endLine":25,"endColumn":16,"suggestions":"328"},{"ruleId":"281","severity":1,"message":"329","line":6,"column":3,"nodeType":"283","messageId":"284","endLine":6,"endColumn":24},{"ruleId":"281","severity":1,"message":"330","line":8,"column":3,"nodeType":"283","messageId":"284","endLine":8,"endColumn":21},{"ruleId":"281","severity":1,"message":"331","line":15,"column":3,"nodeType":"283","messageId":"284","endLine":15,"endColumn":28},{"ruleId":"281","severity":1,"message":"323","line":27,"column":3,"nodeType":"283","messageId":"284","endLine":27,"endColumn":20},{"ruleId":"281","severity":1,"message":"332","line":10,"column":3,"nodeType":"283","messageId":"284","endLine":10,"endColumn":20},{"ruleId":"281","severity":1,"message":"333","line":13,"column":3,"nodeType":"283","messageId":"284","endLine":13,"endColumn":21},{"ruleId":"281","severity":1,"message":"334","line":17,"column":3,"nodeType":"283","messageId":"284","endLine":17,"endColumn":22},{"ruleId":"281","severity":1,"message":"335","line":13,"column":3,"nodeType":"283","messageId":"284","endLine":13,"endColumn":23},{"ruleId":"281","severity":1,"message":"336","line":18,"column":3,"nodeType":"283","messageId":"284","endLine":18,"endColumn":30},{"ruleId":"281","severity":1,"message":"322","line":85,"column":13,"nodeType":"283","messageId":"284","endLine":85,"endColumn":17},"no-unused-vars","'combineReducers' is defined but never used.","Identifier","unusedVar","'applyMiddleware' is defined but never used.","'composeWithDevTools' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["337"],["338"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'Route' is defined but never used.","'SearchBox' is defined but never used.","'Link' is defined but never used.","'useLocation' is defined but never used.","React Hook useEffect has missing dependencies: 'navigate' and 'success'. Either include them or remove the dependency array.",["339"],"'Col' is defined but never used.","'Row' is defined but never used.","'Form' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'navigate', and 'order._id'. Either include them or remove the dependency array.",["340"],"'useNavigate' is defined but never used.","'setSdkReady' is assigned a value but never used.","'successPay' is assigned a value but never used.","'successDeliver' is assigned a value but never used.","'addPayPalScript' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["341"],"Expected '===' and instead saw '=='.",["342"],["343"],"'uploading' is assigned a value but never used.",["344"],"'uploadFileHandler' is assigned a value but never used.","'data' is assigned a value but never used.","'USER_UPDATE_RESET' is defined but never used.","'successUpdate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'id', 'user._id', 'user.email', 'user.isAdmin', and 'user.name'. Either include them or remove the dependency array.",["345"],"React Hook useEffect has missing dependencies: 'navigate' and 'userInfo'. Either include them or remove the dependency array.",["346"],"'USER_REGISTER_REQUEST' is defined but never used.","'USER_REGISTER_FAIL' is defined but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.","'ORDER_PAY_REQUEST' is defined but never used.","'ORDER_CREATE_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'PRODUCT_CREATE_RESET' is defined but never used.","'PRODUCT_CREATE_REVIEW_RESET' is defined but never used.",{"desc":"347","fix":"348"},{"desc":"347","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"desc":"356","fix":"357"},{"desc":"358","fix":"359"},{"desc":"360","fix":"361"},{"desc":"362","fix":"363"},{"desc":"356","fix":"364"},"Update the dependencies array to be: [userInfo, redirect, navigate]",{"range":"365","text":"366"},{"range":"367","text":"366"},"Update the dependencies array to be: [dispatch, userInfo, user, navigate, success]",{"range":"368","text":"369"},"Update the dependencies array to be: [dispatch, navigate, order._id, success]",{"range":"370","text":"371"},"Update the dependencies array to be: [dispatch, id, successProductReview]",{"range":"372","text":"373"},"Update the dependencies array to be: [dispatch, navigate, userInfo]",{"range":"374","text":"375"},"Update the dependencies array to be: [dispatch, userInfo, successDelete, successCreate, createdProduct, navigate]",{"range":"376","text":"377"},"Update the dependencies array to be: [dispatch, product, id, successUpdate, navigate]",{"range":"378","text":"379"},"Update the dependencies array to be: [dispatch, id, user._id, user.email, user.isAdmin, user.name]",{"range":"380","text":"381"},{"range":"382","text":"375"},[1160,1180],"[userInfo, redirect, navigate]",[1057,1077],[1777,1803],"[dispatch, userInfo, user, navigate, success]",[1314,1323],"[dispatch, navigate, order._id, success]",[1903,1935],"[dispatch, id, successProductReview]",[848,868],"[dispatch, navigate, userInfo]",[1501,1567],"[dispatch, userInfo, successDelete, successCreate, createdProduct, navigate]",[1896,1934],"[dispatch, product, id, successUpdate, navigate]",[1261,1263],"[dispatch, id, user._id, user.email, user.isAdmin, user.name]",[851,861]]